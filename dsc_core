// =============================================================
//  Dynamic RP Collar – dsc_core  (2025-06-25)
// =============================================================

// ---------- channel helpers ----------
integer getChannelBase()
{
    integer tail = (integer)("0x" + llGetSubString((string)llGetKey(), -6, -1));
    return -4000 - (tail & 0x0FFF);          // private negative space
}

// ---------- constants ----------
integer CHANNEL_BASE;
integer CHAN_CORE;
integer CHAN_AUTH;
integer CHAN_SETTINGS;
integer CHAN_MENU;

// touch-range thresholds (metres)
float MAX_TOUCH_REZZED = 3.0;
float MAX_TOUCH_WORN   = 10.0;

// ---------- plugin registry ----------
list gPlugins;           // [linkNum, name, minACL, maxACL, …]

integer registerPlugin(integer ln, string name, integer minAcl, integer maxAcl)
{
    integer idx = llListFindList(gPlugins, [ln]);
    if (~idx)
        gPlugins = llDeleteSubList(gPlugins, idx, idx + 3);
    gPlugins += [ln, name, minAcl, maxAcl];
    return 0;
}

string pluginCSV(integer acl)
{
    integer i; integer n = llGetListLength(gPlugins);
    list out;
    for (i = 0; i < n; i += 4)
    {
        integer min = llList2Integer(gPlugins, i + 2);
        integer max = llList2Integer(gPlugins, i + 3);
        if ((acl >= min) && (acl <= max))
            out += llList2String(gPlugins, i + 1);
    }
    return llDumpList2String(out, ",");
}

integer triggerSoftReboot()
{
    llMessageLinked(LINK_SET, CHAN_CORE, "CORE|RELOAD", NULL_KEY);
    llSleep(0.2);            // allow scripts time to persist
    llResetScript();
    return 0;
}

// -------------------------------------------------------------
default
{
    state_entry()
    {
        llSetRemoteScriptAccessPin(0);        // security

        CHANNEL_BASE  = getChannelBase();
        CHAN_CORE     = CHANNEL_BASE - 0;
        CHAN_AUTH     = CHANNEL_BASE - 1;
        CHAN_SETTINGS = CHANNEL_BASE - 2;
        CHAN_MENU     = CHANNEL_BASE - 3;

        llOwnerSay("Core ready (" + (string)CHANNEL_BASE + ").");
        llMessageLinked(LINK_THIS, CHAN_AUTH, "CORE_READY", NULL_KEY);
    }

    touch_start(integer total)
    {
        key   av   = llDetectedKey(0);
        float dist = llVecDist(llDetectedPos(0), llGetPos());
        integer attached = llGetAttached();
        float limit;
        if (attached)
            limit = MAX_TOUCH_WORN;
        else
            limit = MAX_TOUCH_REZZED;

        if (dist <= limit)
            llMessageLinked(LINK_THIS, CHAN_AUTH,
                            "CORE|TOUCH|" + (string)av, NULL_KEY);
    }

    changed(integer c)
    {
        if (c & (CHANGED_INVENTORY | CHANGED_ALLOWED_DROP))
            triggerSoftReboot();
    }

    link_message(integer sender, integer num, string msg, key id)
    {
        if (num != CHAN_CORE) return;

        list   parts = llParseString2List(msg, ["|"], []);
        string cmd   = llList2String(parts, 0);

        if (cmd == "REGISTER")
        {
            registerPlugin(sender,
                           llList2String(parts, 1),
                           (integer)llList2String(parts, 2),
                           (integer)llList2String(parts, 3));
            llMessageLinked(sender, CHAN_CORE, "ACK|REGISTER", NULL_KEY);
        }
        else if (cmd == "REQ_PLUGINS")
        {
            integer acl = (integer)llList2String(parts, 1);
            llMessageLinked(sender, CHAN_CORE,
                            "PLUGINS|" + pluginCSV(acl), NULL_KEY);
        }
        else if (cmd == "SOFTREBOOT")
        {
            triggerSoftReboot();
        }
    }
}
