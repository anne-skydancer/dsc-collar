// === dsc_core.lsl ===
// Core script for DS Collar (DSC)

integer LM_AUTH_CHECK          = -3000;
integer LM_AUTH_RESULT         = -3001;
integer LM_AUTH_WEARER_UPDATE  = -3002;

integer LM_PLUGIN_REG_REQUEST  = -7000;
integer LM_PLUGIN_REG_RESPONSE = -7001;

integer LM_SETTING_REQUEST     = -5000;
integer LM_SETTING_RESPONSE    = -5001;

integer LM_MENU_REQUEST        = -4000;
integer LM_MENU_RESPONSE       = -4001;

integer DIALOG_CHANNEL         = -8000;

integer ACL_NO_ACCESS          = -1;
integer ACL_BACKEND            = 0;
integer ACL_PUBLIC             = 1;
integer ACL_WEARER             = 2;
integer ACL_ADMIN              = 3;
integer ACL_ROOT               = 4;

integer STATE_IDLE             = 0;
integer STATE_MENU             = 1;

key     g_wearer              = NULL_KEY;
key     g_currentUser          = NULL_KEY;
integer g_authLevel            = ACL_NO_ACCESS;
integer g_state                = STATE_IDLE;

list    g_registered_plugins   = [];
list    g_registered_labels    = [];
list    g_registered_acls      = [];
list    g_registered_types     = [];
list    g_registered_parents   = [];

integer g_menu_page            = 0;

integer g_registration_expected = 3;  // Adjust as needed
integer g_registration_count = 0;
integer g_registration_timeout_handle = -1;

integer REGISTRATION_TIMEOUT_SECONDS = 5;

// Forward declarations
RegisterWithPlugins()
{
    llMessageLinked(LINK_SET, LM_PLUGIN_REG_REQUEST, "", NULL_KEY);
    g_registration_count = 0;
    g_registered_plugins = [];
    g_registered_labels = [];
    g_registered_acls = [];
    g_registered_types = [];
    g_registered_parents = [];

    if (g_registration_timeout_handle != -1)
    {
        llSetTimerEvent(0.0);
        g_registration_timeout_handle = -1;
    }

    llSetTimerEvent(REGISTRATION_TIMEOUT_SECONDS);
    g_registration_timeout_handle = 1; // flag
}

UpdateWearer(key wearer)
{
    g_wearer = wearer;
    llMessageLinked(LINK_SET, LM_AUTH_WEARER_UPDATE, "", wearer);
}

ShowMenu()
{
    if (g_currentUser == NULL_KEY) return;
    llMessageLinked(LINK_SET, LM_MENU_REQUEST, "", g_currentUser);
}

SendACLCheck(key user)
{
    if (user == NULL_KEY) return;
    llMessageLinked(LINK_SET, LM_AUTH_CHECK, "", user);
}

default
{
    state_entry()
    {
        llOwnerSay("[CORE] Initializing collar core.");
        g_state = STATE_IDLE;
        g_menu_page = 0;

        integer collarWorn = llGetAttached();
        if (collarWorn != 0)
            g_wearer = llGetOwner();
        else
            g_wearer = NULL_KEY;

        g_currentUser = g_wearer;

        RegisterWithPlugins();

        UpdateWearer(g_wearer);
    }

    timer()
    {
        if (g_registration_timeout_handle != -1)
        {
            llSetTimerEvent(0);
            g_registration_timeout_handle = -1;
            llOwnerSay("[CORE] Plugin registration completed. Total plugins registered: " + (string)llGetListLength(g_registered_plugins));
        }
    }

    link_message(integer sender, integer num, string msg, key id)
    {
        if (num == LM_PLUGIN_REG_RESPONSE)
        {
            if (msg != "")
            {
                list parts = llParseString2List(msg, ["|"], []);
                integer count = llGetListLength(parts);
                integer i;

                for (i = 0; i + 3 < count; i += 4)
                {
                    string label = llList2String(parts, i);
                    string plugin = llList2String(parts, i + 1);
                    integer acl = (integer)llList2String(parts, i + 2);
                    string type = llList2String(parts, i + 3);

                    if (llListFindList(g_registered_plugins, [plugin]) == -1)
                    {
                        g_registered_labels += [label];
                        g_registered_plugins += [plugin];
                        g_registered_acls += [acl];
                        g_registered_types += [type];
                        g_registered_parents += [""];
                        g_registration_count++;
                    }
                }
                llOwnerSay("[CORE] Received plugin registrations, total so far: " + (string)g_registration_count);

                if (g_registration_count >= g_registration_expected && g_registration_timeout_handle != -1)
                {
                    llSetTimerEvent(0);
                    g_registration_timeout_handle = -1;
                    llOwnerSay("[CORE] Registration complete early, total plugins: " + (string)g_registration_count);
                }
            }
        }
        else if (num == LM_AUTH_RESULT)
        {
            integer newLevel = (integer)msg;
            g_authLevel = newLevel;
            llOwnerSay("[CORE] ACL level " + (string)newLevel + " for user " + (string)g_currentUser);

            ShowMenu();
        }
        else if (num == LM_MENU_RESPONSE)
        {
            // Forward menu response only to plugin whose label matches msg
            integer index = llListFindList(g_registered_labels, [msg]);
            if (index != -1)
            {
                string plugin = llList2String(g_registered_plugins, index);
                llMessageLinked(LINK_SET, LM_MENU_RESPONSE, msg, id);
                llOwnerSay("[CORE] Forwarded menu response '" + msg + "' to plugin " + plugin);
            }
            else
            {
                llOwnerSay("[CORE] No plugin matches menu response '" + msg + "'");
            }
        }
        else
        {
            llOwnerSay("[CORE] Unhandled link_message: num=" + (string)num + " msg=" + msg);
        }
    }

    touch_start(integer total_number)
    {
        key interacting_avatar;
        integer collarWorn = llGetAttached();

        if (collarWorn != 0)
        {
            interacting_avatar = llGetOwner();
        }
        else
        {
            interacting_avatar = llDetectedKey(0);
        }

        g_currentUser = interacting_avatar;

        llOwnerSay("[CORE] touch_start fired by " + (string)interacting_avatar);

        if (g_wearer != interacting_avatar)
        {
            UpdateWearer(interacting_avatar);
        }

        SendACLCheck(interacting_avatar);
    }
}
