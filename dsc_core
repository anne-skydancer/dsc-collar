// =============================================================
//  Collar Grand Unified Hub (Strict LSL, Numbered Menus, Confirmations, Debug, Public Access Toggle, ACL Filtering)
//  Version: 2025-07-02h+sessionfix
// =============================================================

integer DEBUG = TRUE;
integer DIALOG_CHAN;

float SCAN_RANGE = 10.0;
integer DIALOG_PAGE_SIZE = 9;
float DIALOG_TIMEOUT = 180.0;

key gOwner = NULL_KEY;
string gOwnerHonorific = "";
list gTrustees = [];
list gTrusteeHonorifics = [];
list gBlacklist = [];
integer gPublicAccess = FALSE;

list gSessions; // [av, page, csv, expiry, context, param, stepdata, menucsv]

// ---- Helpers ----
integer sIdx(key av) { return llListFindList(gSessions, [av]); }
integer gIdx(list L, key k) { return llListFindList(L, [k]); }

integer sSet(key av, integer page, string csv, float expiry, string context, string param, string stepdata, string menucsv) {
    integer i = sIdx(av);
    if (~i) gSessions = llDeleteSubList(gSessions, i, i+7);
    gSessions += [av, page, csv, expiry, context, param, stepdata, menucsv];
    if (DEBUG) llOwnerSay("[DEBUG] sSet: av=" + (string)av + " ctx=" + context + " param=" + param + " stepdata=" + stepdata + " menucsv=" + menucsv);
    return 0;
}
integer sClear(key av) {
    integer i = sIdx(av);
    if (~i) {
        gSessions = llDeleteSubList(gSessions, i, i+7);
        if (DEBUG) llOwnerSay("[DEBUG] sClear: av=" + (string)av);
    }
    return 0;
}
list sGet(key av) {
    integer i = sIdx(av);
    if (~i) return llList2List(gSessions, i, i+7);
    return [];
}

integer getACL(key av) {
    if (gIdx(gBlacklist, av) != -1) return 6; // Blacklist (LV6)
    if (av == gOwner) return 1;               // Owner (LV1)
    if (av == llGetOwner()) {
        if (gOwner == NULL_KEY) return 1;     // Unowned wearer = LV1
        else return 3;                        // Owned wearer = LV3
    }
    if (gIdx(gTrustees, av) != -1) return 2;  // Trustee (LV2)
    if (gPublicAccess) return 4;              // Public (LV4)
    return 5;                                 // No access (LV5)
}

list buildNumberedButtons(list labels) {
    list buttons = [];
    integer i = 0;
    for (i=0; i<llGetListLength(labels); ++i) {
        buttons += (string)(i+1);
    }
    while (llGetListLength(buttons) % 3 != 0) buttons += " ";
    return buttons;
}
string numberedMenuText(list labels) {
    string text = "";
    integer i = 0;
    for (i=0; i<llGetListLength(labels); ++i) {
        text += (string)(i+1) + ". " + llList2String(labels,i) + "\n";
    }
    return text;
}

list ownerHonorifics() { return [ "Master", "Mistress", "Daddy", "Mommy", "King", "Queen" ]; }
list trusteeHonorifics() { return [ "Sir", "Miss", "Mister", "Madam" ]; }
list makeUACNavRow() { return [ "Cancel", " ", "OK" ]; }
list makeInfoNavRow() { return [ " ", "OK", " " ]; }

showUACDialog(key av, string message) {
    if (DEBUG) llOwnerSay("[DEBUG] showUACDialog to " + (string)av + ": " + message);
    llDialog(av, message, makeUACNavRow(), DIALOG_CHAN);
}
showInfoDialog(key av, string message) {
    if (DEBUG) llOwnerSay("[DEBUG] showInfoDialog to " + (string)av + ": " + message);
    llDialog(av, message, makeInfoNavRow(), DIALOG_CHAN);
}

showPublicAccessDialog(key av) {
    string txt = "Public access is currently ";
    list buttons;
    if (gPublicAccess) {
        txt += "ENABLED.\nDisable public access?";
        buttons = [ "Disable", "Cancel" ];
    } else {
        txt += "DISABLED.\nEnable public access?";
        buttons = [ "Enable", "Cancel" ];
    }
    while (llGetListLength(buttons) % 3 != 0) buttons += " ";
    sSet(av, 0, "", llGetUnixTime() + DIALOG_TIMEOUT, "public_toggle_confirm", "", "", "");
    llDialog(av, txt, buttons, DIALOG_CHAN);
}

showMainMenu(key av) {
    integer acl = getACL(av);
    list features = [];
    if (acl == 1) {
        if (gOwner != NULL_KEY && av == gOwner) {
            features = [ "Release Sub", "Add Trustee", "Remove Trustee", "Blacklist", "Public Access", "Apps", "Status" ];
        } else if (gOwner == NULL_KEY && av == llGetOwner()) {
            features = [ "Add Owner", "Add Trustee", "Remove Trustee", "Blacklist", "Public Access", "Apps", "Status" ];
        } else if (av == gOwner) {
            features = [ "Release Sub", "Add Trustee", "Remove Trustee", "Blacklist", "Public Access", "Apps", "Status" ];
        } else {
            features = [ "Add Owner", "Add Trustee", "Remove Trustee", "Blacklist", "Public Access", "Apps", "Status" ];
        }
    }
    else if (acl == 2) {
        features = [ "Remove Trustee", "Blacklist", "Apps", "Status" ];
    }
    else if (acl == 3) {
        features = [ "Runaway", "Apps", "Status" ];
    }
    else if (acl == 4) {
        features = [ "Apps", "Status" ];
    }

    if (acl == 5) { showInfoDialog(av, "This collar is not available to the public."); return; }
    if (acl == 6) { showInfoDialog(av, "You have been blacklisted from this collar."); return; }

    if (DEBUG) llOwnerSay("[DEBUG] showMainMenu to " + (string)av + " options: " + llDumpList2String(features, ","));
    string dialogBody = "Select an option:\n" + numberedMenuText(features);
    list buttons = buildNumberedButtons(features);
    sSet(av, 0, "", llGetUnixTime() + DIALOG_TIMEOUT, "main_menu", "", "", llDumpList2String(features, ","));
    llDialog(av, dialogBody, buttons, DIALOG_CHAN);
}

showStatus(key av) {
    string txt = "";
    if (gOwner != NULL_KEY)
        txt += "Owner: " + gOwnerHonorific + " " + llKey2Name(gOwner) + "\n";
    else
        txt += "Collar is unowned.\n";
    if (llGetListLength(gTrustees) > 0) {
        txt += "Trustees:\n";
        integer i;
        for (i=0; i<llGetListLength(gTrustees); ++i)
            txt += "  " + llList2String(gTrusteeHonorifics,i) + " " + llKey2Name(llList2Key(gTrustees,i)) + "\n";
    }
    txt += "Public Access: ";
    if (gPublicAccess) txt += "ENABLED\n";
    else txt += "DISABLED\n";
    showInfoDialog(av, txt);
}
showApps(key av) { showInfoDialog(av, "(Stub) Apps list would go here."); }

timeoutCheck() {
    integer now = llGetUnixTime();
    integer i = 0;
    while (i < llGetListLength(gSessions)) {
        float expiry = llList2Float(gSessions, i+3);
        key av = llList2Key(gSessions, i);
        if (now > expiry) {
            llInstantMessage(av, "Menu timed out. Please try again.");
            gSessions = llDeleteSubList(gSessions, i, i+7);
        } else {
            i += 8;
        }
    }
}

beginAddOwner(key av) {
    if (DEBUG) llOwnerSay("[DEBUG] beginAddOwner: av=" + (string)av);
    llSensor("", NULL_KEY, AGENT, SCAN_RANGE, TWO_PI);
    sSet(av, 0, "", llGetUnixTime() + DIALOG_TIMEOUT, "add_owner", "", "", "");
}
beginReleaseSub(key av) {
    if (DEBUG) llOwnerSay("[DEBUG] beginReleaseSub: av=" + (string)av);
    showUACDialog(av, "Are you sure you want to release your sub? This will remove your ownership.");
    sSet(av, 0, "", llGetUnixTime() + DIALOG_TIMEOUT, "release_sub_confirm_owner", "", "", "");
}
beginAddTrustee(key av) {
    if (DEBUG) llOwnerSay("[DEBUG] beginAddTrustee: av=" + (string)av);
    llSensor("", NULL_KEY, AGENT, SCAN_RANGE, TWO_PI);
    sSet(av, 0, "", llGetUnixTime() + DIALOG_TIMEOUT, "add_trustee", "", "", "");
}
beginRemoveTrustee(key av) {
    if (DEBUG) llOwnerSay("[DEBUG] beginRemoveTrustee: av=" + (string)av);
    if (llGetListLength(gTrustees) == 0) {
        showInfoDialog(av, "There are no trustees to remove.");
        return;
    }
    list display = [];
    integer i = 0;
    for (i=0; i<llGetListLength(gTrustees); ++i)
        display += llKey2Name(llList2Key(gTrustees,i));
    string csv = llDumpList2String(gTrustees, ",");
    float expiry = llGetUnixTime() + DIALOG_TIMEOUT;
    sSet(av, 0, csv, expiry, "remove_trustee", "", "", csv);
    string dialogBody = "Select trustee to remove:\n" + numberedMenuText(display);
    list buttons = buildNumberedButtons(display);
    llDialog(av, dialogBody, buttons, DIALOG_CHAN);
}
beginBlacklist(key av) {
    if (DEBUG) llOwnerSay("[DEBUG] beginBlacklist: av=" + (string)av);
    llSensor("", NULL_KEY, AGENT, SCAN_RANGE, TWO_PI);
    sSet(av, 0, "", llGetUnixTime() + DIALOG_TIMEOUT, "blacklist", "", "", "");
}

default
{
    state_entry()
    {
        DIALOG_CHAN = (integer)llFrand(-1000000.0);
        llListen(DIALOG_CHAN, "", NULL_KEY, "");
        llSetTimerEvent(1.0);
        if (DEBUG) llOwnerSay("[DEBUG] Ready (dialog chan " + (string)DIALOG_CHAN + ")");
    }

    touch_start(integer t)
    {
        key av = llDetectedKey(0);
        if (DEBUG) llOwnerSay("[DEBUG] touch_start by " + (string)av);
        showMainMenu(av);
    }

    sensor(integer n)
    {
        integer i;
        for (i=0; i<llGetListLength(gSessions); i+=8)
        {
            key av = llList2Key(gSessions,i);
            string ctx = llList2String(gSessions,i+4);
            if (ctx == "add_owner" || ctx == "add_trustee" || ctx == "blacklist") {
                list cands = [];
                integer j;
                for (j=0; j<n; ++j)
                {
                    key k = llDetectedKey(j);
                    if (k == av) jump skip;
                    if (ctx == "add_owner" && k == gOwner) jump skip;
                    if (ctx == "add_trustee" && gIdx(gTrustees, k) != -1) jump skip;
                    if (ctx == "blacklist" && gIdx(gBlacklist, k) != -1) jump skip;
                    cands += k;
                    @skip;
                }
                if (llGetListLength(cands) == 0) {
                    showInfoDialog(av, "No avatars found within 10 meters.");
                    sClear(av); return;
                }
                list labels = [];
                for (j=0; j<llGetListLength(cands); ++j)
                    labels += llKey2Name(llList2Key(cands,j));
                string dialogBody = "";
                if (ctx == "add_owner") dialogBody = "Select your new primary owner:\n";
                else if (ctx == "add_trustee") dialogBody = "Select a trustee:\n";
                else if (ctx == "blacklist") dialogBody = "Blacklist an avatar:\n";
                dialogBody += numberedMenuText(labels);
                list buttons = buildNumberedButtons(labels);
                string candsCsv = llDumpList2String(cands, ",");
                if (DEBUG) llOwnerSay("[DEBUG] sensor candidate dialog to " + (string)av + " ctx: " + ctx + " cands: " + candsCsv);
                sSet(av, 0, candsCsv, llGetUnixTime() + DIALOG_TIMEOUT, ctx, "", "", candsCsv);
                llDialog(av, dialogBody, buttons, DIALOG_CHAN);
                return;
            }
        }
    }

    no_sensor()
    {
        integer i;
        for (i=0; i<llGetListLength(gSessions); i+=8) {
            key av = llList2Key(gSessions, i);
            string ctx = llList2String(gSessions, i+4);
            if (ctx == "add_owner" || ctx == "add_trustee" || ctx == "blacklist") {
                showInfoDialog(av, "No avatars found within 10 meters.");
                sClear(av);
            }
        }
    }

    listen(integer chan, string nm, key av, string msg)
    {
        if (chan != DIALOG_CHAN) return;

        // --------------------------- CONTEXT-BASED LOGIC ONLY --------------------------
        list sess = sGet(av);
        integer page = 0;
        string csv = "";
        float expiry = 0.0;
        string ctx = "";
        string param = "";
        string stepdata = "";
        string menucsv = "";
        if (llGetListLength(sess) != 0) {
            page     = llList2Integer(sess, 1);
            csv      = llList2String(sess, 2);
            expiry   = llList2Float(sess, 3);
            ctx      = llList2String(sess, 4);
            param    = llList2String(sess, 5);
            stepdata = llList2String(sess, 6);
            menucsv  = llList2String(sess, 7);
        }

        // --- Main Menu logic: map numbers to actions
        if (ctx == "main_menu") {
            list allowed = llParseString2List(menucsv, [","], []);
            integer sel = (integer)msg;
            if (sel > 0 && sel <= llGetListLength(allowed)) {
                string action = llList2String(allowed, sel-1);
                if (DEBUG) llOwnerSay("[DEBUG] Main menu select: " + action + " by " + (string)av);
                if (action == "Add Owner")        { beginAddOwner(av); return; }
                if (action == "Release Sub")      { beginReleaseSub(av); return; }
                if (action == "Add Trustee")      { beginAddTrustee(av); return; }
                if (action == "Remove Trustee")   { beginRemoveTrustee(av); return; }
                if (action == "Blacklist")        { beginBlacklist(av); return; }
                if (action == "Public Access")    { showPublicAccessDialog(av); return; }
                if (action == "Apps")             { showApps(av); return; }
                if (action == "Status")           { showStatus(av); return; }
                if (action == "Runaway") {
                    showUACDialog(av, "This will forcibly remove your primary owner and restore your access.");
                    sSet(av, 0, "", llGetUnixTime() + DIALOG_TIMEOUT, "runaway_confirm", "", "", "");
                    return;
                }
            }
            return;
        }

        // --- ADD OWNER selection (numbered honorific)
        if (ctx == "add_owner") {
            list keys = llParseString2List(csv, [","], []);
            integer sel = (integer)msg;
            if (sel > 0 && sel <= llGetListLength(keys)) {
                key picked = llList2Key(keys, sel-1);
                list honors = ownerHonorifics();
                string honorDialog = "Select an honorific for your owner:\n" + numberedMenuText(honors);
                sSet(av, 0, "", llGetUnixTime() + DIALOG_TIMEOUT, "add_owner_honorific", (string)picked, "", "");
                llDialog(av, honorDialog, buildNumberedButtons(honors), DIALOG_CHAN);
                return;
            }
        }
        if (ctx == "add_owner_honorific") {
            list honors = ownerHonorifics();
            integer sel = (integer)msg;
            if (sel > 0 && sel <= llGetListLength(honors)) {
                key picked = (key)param;
                string honorific = llList2String(honors, sel-1);
                sSet(av, 0, "", llGetUnixTime() + DIALOG_TIMEOUT, "add_owner_confirm_wearer", (string)picked, honorific, "");
                showUACDialog(av, "Are you sure you wish to assign " + honorific + " " + llKey2Name(picked) + " as your new owner?");
                return;
            }
            if (msg == "Cancel") { sClear(av); return; }
        }
        // --- ADD OWNER double confirm (wearer/candidate)
        if (ctx == "add_owner_confirm_wearer") {
            if (msg == "OK") {
                key picked = (key)param;
                string honorific = stepdata;
                sSet(picked, 0, "", llGetUnixTime() + DIALOG_TIMEOUT, "add_owner_confirm_candidate", (string)av, honorific, "");
                llDialog(picked, llKey2Name(av) + " wishes to assign you as their collar owner.\nHonorific: " + honorific + "\nDo you accept?", makeUACNavRow(), DIALOG_CHAN);
                // Only clear after candidate responds!
                return;
            }
            if (msg == "Cancel") { sClear(av); return; }
        }
        if (ctx == "add_owner_confirm_candidate") {
            if (msg == "OK") {
                key wearer = (key)param;
                string honorific = stepdata;
                gOwner = av;
                gOwnerHonorific = honorific;
                showInfoDialog(wearer, "You are now property of " + honorific + " " + llKey2Name(av));
                showInfoDialog(av, "You are now owner of " + llKey2Name(wearer) + ".");
                sClear(av);      // candidate
                sClear(wearer);  // initiator
                return;
            }
            if (msg == "Cancel") { sClear(av); sClear((key)param); return; }
        }

        // --- RELEASE SUB double confirm (owner then wearer)
        if (ctx == "release_sub_confirm_owner") {
            if (msg == "OK") {
                key wearer = llGetOwner();
                sSet(wearer, 0, "", llGetUnixTime() + DIALOG_TIMEOUT, "release_sub_confirm_wearer", (string)av, "", "");
                llDialog(wearer, llKey2Name(av) + " wishes to release you from their collar. Do you accept?", makeUACNavRow(), DIALOG_CHAN);
                // Only clear after wearer responds!
                return;
            }
            if (msg == "Cancel") { sClear(av); return; }
        }
        if (ctx == "release_sub_confirm_wearer") {
            if (msg == "OK") {
                gOwner = NULL_KEY;
                gOwnerHonorific = "";
                showInfoDialog(av, "You are no longer owned.");
                showInfoDialog(llGetOwner(), "Collar is now unowned.");
                sClear(av); // candidate
                sClear(llGetOwner()); // initiator
                return;
            }
            if (msg == "Cancel") { sClear(av); sClear((key)param); return; }
        }

        // --- ADD TRUSTEE: pick candidate, prompt honorific, single confirmation
        if (ctx == "add_trustee") {
            list keys = llParseString2List(csv, [","], []);
            integer sel = (integer)msg;
            if (sel > 0 && sel <= llGetListLength(keys)) {
                key picked = llList2Key(keys, sel-1);
                list honors = trusteeHonorifics();
                string honorDialog = "Select an honorific for your trustee:\n" + numberedMenuText(honors);
                sSet(av, 0, "", llGetUnixTime() + DIALOG_TIMEOUT, "add_trustee_honorific", (string)picked, "", "");
                llDialog(av, honorDialog, buildNumberedButtons(honors), DIALOG_CHAN);
                return;
            }
        }
        if (ctx == "add_trustee_honorific") {
            list honors = trusteeHonorifics();
            integer sel = (integer)msg;
            if (sel > 0 && sel <= llGetListLength(honors)) {
                key picked = (key)param;
                string honorific = llList2String(honors, sel-1);
                sSet(picked, 0, "", llGetUnixTime() + DIALOG_TIMEOUT, "add_trustee_confirm_candidate", (string)av, honorific, "");
                llDialog(picked, llKey2Name(av) + " wishes to add you as trustee to their collar.\nHonorific: " + honorific + "\nDo you accept?", makeUACNavRow(), DIALOG_CHAN);
                // Only clear after candidate responds!
                return;
            }
            if (msg == "Cancel") { sClear(av); return; }
        }
        if (ctx == "add_trustee_confirm_candidate") {
            if (msg == "OK") {
                key wearer = (key)param;
                string honorific = stepdata;
                gTrustees += av;
                gTrusteeHonorifics += honorific;
                showInfoDialog(wearer, llKey2Name(av) + " is now your trustee.");
                showInfoDialog(av, "You are now a trustee for " + llKey2Name(wearer) + ".");
                sClear(av); // candidate
                sClear(wearer); // initiator
                return;
            }
            if (msg == "Cancel") { sClear(av); sClear((key)param); return; }
        }

        // --- REMOVE TRUSTEE (single confirm: candidate only)
        if (ctx == "remove_trustee") {
            list keys = llParseString2List(csv, [","], []);
            integer sel = (integer)msg;
            if (sel > 0 && sel <= llGetListLength(keys)) {
                key picked = llList2Key(keys, sel-1);
                sSet(picked, 0, "", llGetUnixTime() + DIALOG_TIMEOUT, "remove_trustee_confirm_candidate", (string)av, "", "");
                llDialog(picked, llKey2Name(av) + " wishes to remove you as a trustee. Do you accept?", makeUACNavRow(), DIALOG_CHAN);
                // Only clear after candidate responds!
                return;
            }
        }
        if (ctx == "remove_trustee_confirm_candidate") {
            if (msg == "OK") {
                key initiator = (key)param;
                integer idx = gIdx(gTrustees, av);
                if (idx != -1) {
                    gTrustees = llDeleteSubList(gTrustees, idx, idx);
                    gTrusteeHonorifics = llDeleteSubList(gTrusteeHonorifics, idx, idx);
                    showInfoDialog(initiator, "Trustee removed.");
                    showInfoDialog(av, "You have been removed as a trustee.");
                }
                sClear(av); // candidate
                sClear(initiator); // initiator
                return;
            }
            if (msg == "Cancel") { sClear(av); sClear((key)param); return; }
        }

        // --- BLACKLIST (single confirm: initiator only)
        if (ctx == "blacklist") {
            list keys = llParseString2List(csv, [","], []);
            integer sel = (integer)msg;
            if (sel > 0 && sel <= llGetListLength(keys)) {
                key picked = llList2Key(keys, sel-1);
                if (DEBUG) llOwnerSay("[DEBUG] blacklist picked: " + (string)picked);
                sSet(av, 0, "", llGetUnixTime() + DIALOG_TIMEOUT, "blacklist_confirm", (string)picked, "", "");
                showUACDialog(av, "You are about to blacklist " + llKey2Name(picked) + ". Continue?");
                // Only clear after final confirm
                return;
            }
        }
        if (ctx == "blacklist_confirm") {
            if (msg == "OK") {
                key picked = (key)param;
                gBlacklist += picked;
                showInfoDialog(av, "You have blacklisted " + llKey2Name(picked) + ".");
                sClear(av);
                return;
            }
            if (msg == "Cancel") { sClear(av); return; }
        }

        // --- PUBLIC ACCESS TOGGLE
        if (ctx == "public_toggle_confirm") {
            if (msg == "Enable") {
                gPublicAccess = TRUE;
                showInfoDialog(av, "Public access is now ENABLED.");
                sClear(av);
                return;
            }
            if (msg == "Disable") {
                gPublicAccess = FALSE;
                showInfoDialog(av, "Public access is now DISABLED.");
                sClear(av);
                return;
            }
            if (msg == "Cancel") { sClear(av); return; }
        }

        // RUNAWAY (owned wearer only)
        if (ctx == "runaway_confirm") {
            if (msg == "OK") {
                gOwner = NULL_KEY;
                gOwnerHonorific = "";
                showInfoDialog(av, "You have run away and are now unowned.");
                sClear(av);
                return;
            }
            if (msg == "Cancel") { sClear(av); return; }
        }
    }

    timer() { timeoutCheck(); }
}
