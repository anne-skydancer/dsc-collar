// =============================================================
//  Collar Access Plugin (Dialog channel passed per session, modular for GUH)
//  Version: 2025-07-04 - Strict LSL, with correct jump/@label loop control
// =============================================================

integer DEBUG = TRUE;

float SCAN_RANGE = 10.0;
integer DIALOG_PAGE_SIZE = 9;
float DIALOG_TIMEOUT = 180.0;

// ========== Persistent State ==========
key gOwner = NULL_KEY;
string gOwnerHonorific = "";
list gTrustees = [];
list gTrusteeHonorifics = [];
list gBlacklist = [];
integer gPublicAccess = FALSE;
integer gLocked = FALSE;

// Session cache: [av, page, csv, expiry, context, param, stepdata, menucsv, dialog_chan, listen_handle]
list gSessions;

// ========== Helpers ==========

syncStateToGUH()
{
    /* ---------------- build the seven text fields ---------------- */
    string ownerHon = gOwnerHonorific;
    if (ownerHon == "") ownerHon = " ";

    string trustCsv = llDumpList2String(gTrustees, ",");
    if (trustCsv == "") trustCsv = " ";

    string trustHonCsv = llDumpList2String(gTrusteeHonorifics, ",");
    if (trustHonCsv == "") trustHonCsv = " ";

    string blCsv = llDumpList2String(gBlacklist, ",");
    if (blCsv == "") blCsv = " ";

    string pubStr;
    if (gPublicAccess == TRUE)
        pubStr = "1";
    else
        pubStr = "0";

    string lockStr;
    if (gLocked == TRUE)
        lockStr = "1";
    else
        lockStr = "0";

    /* ---------------- send the 8-field packet -------------------- */
    llMessageLinked(
        LINK_THIS,
        520,
        "state_sync|" +
        (string)gOwner           + "|" +   // 1  owner UUID
        ownerHon                 + "|" +   // 2  owner honorific  (blank = " ")
        trustCsv                 + "|" +   // 3  trustees UUID csv (blank = " ")
        trustHonCsv              + "|" +   // 4  trustee honors   (blank = " ")
        blCsv                    + "|" +   // 5  blacklist csv    (blank = " ")
        pubStr                   + "|" +   // 6  public flag      (0/1)
        lockStr,                             // 7  lock flag        (0/1)
        NULL_KEY);

    if (DEBUG) llOwnerSay("[Access DEBUG] State sync sent (8 fields)");
}


integer sIdx(key av)
/* return index of avatar session in gSessions          */
{
    return llListFindList(gSessions, [av]);
}

integer gIdx(list L, key k)
/* generic index-of helper used by getACL() etc.        */
{
    return llListFindList(L, [k]);
}

integer sSet(key av, integer page, string csv, float expiry, string context, string param, string stepdata, string menucsv, integer dialog_chan) {
    if (DEBUG) llOwnerSay("[Access DEBUG] sSet: av=" + (string)av + " ctx=" + context + " dialog_chan=" + (string)dialog_chan);
    integer i = sIdx(av);
    integer old_listen = -1;
    if (~i) {
        old_listen = llList2Integer(gSessions, i+9);
        gSessions = llDeleteSubList(gSessions, i, i+9);
    }
    if (old_listen != -1) llListenRemove(old_listen);
    integer listen_handle = llListen(dialog_chan, "", av, "");
    gSessions += [av, page, csv, expiry, context, param, stepdata, menucsv, dialog_chan, listen_handle];
    return 0;
}

integer sClear(key av) {
    if (DEBUG) llOwnerSay("[Access DEBUG] sClear: av=" + (string)av);
    integer i = sIdx(av);
    if (~i) {
        integer old_listen = llList2Integer(gSessions, i+9);
        if (old_listen != -1) llListenRemove(old_listen);
        gSessions = llDeleteSubList(gSessions, i, i+9);
    }
    return 0;
}

list sGet(key av) {
    integer i = sIdx(av);
    if (~i) return llList2List(gSessions, i, i+9);
    return [];
}

integer getACL(key av) {
    if (gIdx(gBlacklist, av) != -1) return 6; // Blacklist
    if (av == gOwner) return 1;               // Owner (LV1)
    if (av == llGetOwner()) {
        if (gOwner == NULL_KEY) {
            return 1;     // Unowned wearer = LV1
        } else {
            return 3;     // Owned wearer = LV3
        }
    }
    if (gIdx(gTrustees, av) != -1) return 2;  // Trustee (LV2)
    if (gPublicAccess == TRUE) return 4;       // Public (LV4)
    return 5;                                 // No access (LV5)
}

list buildNumberedButtons(list labels) {
    list buttons = [];
    integer i;
    for (i=0; i<llGetListLength(labels); ++i) buttons += (string)(i+1);
    while (llGetListLength(buttons) % 3 != 0) buttons += " ";
    return buttons;
}

string numberedMenuText(list labels) {
    string text = "";
    integer i;
    for (i=0; i<llGetListLength(labels); ++i)
        text += (string)(i+1) + ". " + llList2String(labels,i) + "\n";
    return text;
}

list ownerHonorifics() { return [ "Master", "Mistress", "Daddy", "Mommy", "King", "Queen" ]; }
list trusteeHonorifics() { return [ "Sir", "Miss", "Mister", "Madam" ]; }
list makeUACNavRow() { return [ "Cancel", " ", "OK" ]; }
list makeInfoNavRow() { return [ " ", "OK", " " ]; }

showUACDialog(key av, string message, integer dialog_chan) {
    if (DEBUG) llOwnerSay("[Access DEBUG] showUACDialog: " + (string)av + ": " + message + " chan=" + (string)dialog_chan);
    llDialog(av, message, makeUACNavRow(), dialog_chan);
}

showInfoDialog(key av, string message, integer dialog_chan) {
    if (DEBUG) llOwnerSay("[Access DEBUG] showInfoDialog: " + (string)av + ": " + message + " chan=" + (string)dialog_chan);
    llDialog(av, message, makeInfoNavRow(), dialog_chan);
}

showPublicAccessDialog(key av, integer dialog_chan) {
    string txt = "Public access is currently ";
    list buttons;
    if (gPublicAccess == TRUE) {
        txt += "ENABLED.\nDisable public access?";
        buttons = [ "Disable", "Cancel" ];
    } else {
        txt += "DISABLED.\nEnable public access?";
        buttons = [ "Enable", "Cancel" ];
    }
    while (llGetListLength(buttons) % 3 != 0) buttons += " ";
    sSet(av, 0, "", llGetUnixTime() + DIALOG_TIMEOUT, "public_toggle_confirm", "", "", "", dialog_chan);
    llDialog(av, txt, buttons, dialog_chan);
}

// ---- Access Management Menu ----
showAccessMenu(key av, integer dialog_chan) {
    integer acl = getACL(av);
    list buttons = [];
    list actions = [];

    if (acl == 1) {
        if (gOwner != NULL_KEY && av == gOwner) {
            buttons = [ "Release Sub", "Add Trustee", "Remove Trustee", "Add Blacklist", "Rem Blacklist", "Public" ];
            actions = [ "Release Sub", "Add Trustee", "Remove Trustee", "Add Blacklist", "Rem Blacklist", "Public" ];
        } else if (gOwner == NULL_KEY && av == llGetOwner()) {
            buttons = [ "Add Owner", "Add Trustee", "Remove Trustee", "Add Blacklist", "Rem Blacklist", "Public" ];
            actions = [ "Add Owner", "Add Trustee", "Remove Trustee", "Add Blacklist", "Rem Blacklist", "Public" ];
        } else if (av == gOwner) {
            buttons = [ "Release Sub", "Add Trustee", "Remove Trustee", "Add Blacklist", "Rem Blacklist", "Public" ];
            actions = [ "Release Sub", "Add Trustee", "Remove Trustee", "Add Blacklist", "Rem Blacklist", "Public" ];
        } else {
            buttons = [ "Add Owner", "Add Trustee", "Remove Trustee", "Add Blacklist", "Rem Blacklist", "Public" ];
            actions = [ "Add Owner", "Add Trustee", "Remove Trustee", "Add Blacklist", "Rem Blacklist", "Public" ];
        }
    }
    else if (acl == 2) {
        buttons = [ "Remove Trustee", "Add Blacklist", "Rem Blacklist" ];
        actions = [ "Remove Trustee", "Add Blacklist", "Rem Blacklist" ];
    }
    else if (acl == 3) {
        buttons = [ "Add Blacklist", "Rem Blacklist", "Runaway" ];
        actions = [ "Add Blacklist", "Rem Blacklist", "Runaway" ];
    }

    if (llGetListLength(buttons) == 0) {
        showInfoDialog(av, "No access management options available.", dialog_chan);
        return;
    }

    while (llGetListLength(buttons) % 3 != 0) buttons += " ";
    sSet(av, 0, "", llGetUnixTime() + DIALOG_TIMEOUT, "access_menu", "", "", llDumpList2String(actions, ","), dialog_chan);
    llDialog(av, "Access Management:", buttons, dialog_chan);
}

timeoutCheck() {
    integer now = llGetUnixTime();
    integer i = 0;
    while (i < llGetListLength(gSessions)) {
        float expiry = llList2Float(gSessions, i+3);
        key av = llList2Key(gSessions, i);
        if (now > expiry) {
            llInstantMessage(av, "Menu timed out. Please try again.");
            sClear(av);
        } else {
            i += 10;
        }
    }
}

// ---- Flows ----

beginAddOwner(key av, integer dialog_chan) {
    llSensor("", NULL_KEY, AGENT, SCAN_RANGE, TWO_PI);
    sSet(av, 0, "", llGetUnixTime() + DIALOG_TIMEOUT, "add_owner", "", "", "", dialog_chan);
}
beginReleaseSub(key av, integer dialog_chan) {
    showUACDialog(av, "Are you sure you want to release your sub? This will remove your ownership.", dialog_chan);
    sSet(av, 0, "", llGetUnixTime() + DIALOG_TIMEOUT, "release_sub_confirm_owner", "", "", "", dialog_chan);
}
beginAddTrustee(key av, integer dialog_chan) {
    llSensor("", NULL_KEY, AGENT, SCAN_RANGE, TWO_PI);
    sSet(av, 0, "", llGetUnixTime() + DIALOG_TIMEOUT, "add_trustee", "", "", "", dialog_chan);
}
beginRemoveTrustee(key av, integer dialog_chan) {
    if (llGetListLength(gTrustees) == 0) {
        showInfoDialog(av, "There are no trustees to remove.", dialog_chan);
        return;
    }
    list display = [];
    integer i = 0;
    for (i=0; i<llGetListLength(gTrustees); ++i)
        display += llKey2Name(llList2Key(gTrustees,i));
    string csv = llDumpList2String(gTrustees, ",");
    float expiry = llGetUnixTime() + DIALOG_TIMEOUT;
    sSet(av, 0, csv, expiry, "remove_trustee", "", "", csv, dialog_chan);
    string dialogBody = "Select trustee to remove:\n" + numberedMenuText(display);
    list buttons = buildNumberedButtons(display);
    llDialog(av, dialogBody, buttons, dialog_chan);
}
beginBlacklist(key av, integer dialog_chan) {
    llSensor("", NULL_KEY, AGENT, SCAN_RANGE, TWO_PI);
    sSet(av, 0, "", llGetUnixTime() + DIALOG_TIMEOUT, "blacklist", "", "", "", dialog_chan);
}
beginUnblacklist(key av, integer dialog_chan) {
    if (llGetListLength(gBlacklist) == 0) {
        showInfoDialog(av, "No one is blacklisted.", dialog_chan);
        return;
    }
    list display = [];
    integer i;
    for (i=0; i<llGetListLength(gBlacklist); ++i)
        display += llKey2Name(llList2Key(gBlacklist,i));
    string csv = llDumpList2String(gBlacklist, ",");
    float expiry = llGetUnixTime() + DIALOG_TIMEOUT;
    sSet(av, 0, csv, expiry, "unblacklist", "", "", csv, dialog_chan);
    string dialogBody = "Select avatar to unblacklist:\n" + numberedMenuText(display);
    list buttons = buildNumberedButtons(display);
    llDialog(av, dialogBody, buttons, dialog_chan);
}

// ========== Sensor Events ==========
default
{
    state_entry()
    {
        llMessageLinked(LINK_THIS, 500, "register|Access|3|access", NULL_KEY);
        llSetTimerEvent(1.0);
        if (DEBUG) llOwnerSay("[Access DEBUG] Plugin ready.");
    }

    link_message(integer sender_num, integer num, string str, key id)
    {
        // GUH sends: num=510, str="access|<avatar>|<dialog_chan>"
        if (num == 510) {
            list args = llParseString2List(str, ["|"], []);
            if (llList2String(args,0) == "access" && llGetListLength(args) >= 3) {
                key av = (key)llList2String(args,1);
                integer dialog_chan = (integer)llList2String(args,2);
                showAccessMenu(av, dialog_chan);
                return;
            }
        }
    }

sensor(integer n)
{
    integer i;
    for (i=0; i<llGetListLength(gSessions); i+=10)
    {
        key av = llList2Key(gSessions,i);
        string ctx = llList2String(gSessions,i+4);
        integer dialog_chan = llList2Integer(gSessions,i+8);
        if (ctx == "add_owner" || ctx == "add_trustee" || ctx == "blacklist") {
            list cands = [];
            integer j;
            for (j=0; j<n; ++j)
            {
                key k = llDetectedKey(j);
                if (k == av) jump skip_current;
                if (ctx == "add_owner" && k == gOwner) jump skip_current;
                if (ctx == "add_trustee" && gIdx(gTrustees, k) != -1) jump skip_current;
                if (ctx == "blacklist" && gIdx(gBlacklist, k) != -1) jump skip_current;
                cands += k;
                @skip_current;
            }
            if (llGetListLength(cands) == 0) {
                showInfoDialog(av, "No avatars found within 10 meters.", dialog_chan);
                sClear(av);
                return;
            }
            list labels = [];
            integer k;
            for (k=0; k<llGetListLength(cands); ++k)
                labels += llKey2Name(llList2Key(cands,k));
            string dialogBody = "";
            if (ctx == "add_owner") dialogBody = "Select your new primary owner:\n";
            else if (ctx == "add_trustee") dialogBody = "Select a trustee:\n";
            else if (ctx == "blacklist") dialogBody = "Blacklist an avatar:\n";
            dialogBody += numberedMenuText(labels);
            list buttons = buildNumberedButtons(labels);
            string candsCsv = llDumpList2String(cands, ",");
            sSet(av, 0, candsCsv, llGetUnixTime() + DIALOG_TIMEOUT, ctx, "", "", candsCsv, dialog_chan);
            llDialog(av, dialogBody, buttons, dialog_chan);
            return;
        }
    }
}
    no_sensor()
    {
        integer i;
        for (i=0; i<llGetListLength(gSessions); i+=10) {
            key av = llList2Key(gSessions, i);
            string ctx = llList2String(gSessions, i+4);
            integer dialog_chan = llList2Integer(gSessions, i+8);
            if (ctx == "add_owner" || ctx == "add_trustee" || ctx == "blacklist") {
                showInfoDialog(av, "No avatars found within 10 meters.", dialog_chan);
                sClear(av);
            }
        }
    }

    listen(integer chan, string nm, key av, string msg)
    {
        list sess = sGet(av);
        if (llGetListLength(sess) == 0) return;
        integer dialog_chan = llList2Integer(sess, 8);
        if (chan != dialog_chan) return;

        integer page = llList2Integer(sess, 1);
        string csv = llList2String(sess, 2);
        float expiry = llList2Float(sess, 3);
        string ctx = llList2String(sess, 4);
        string param = llList2String(sess, 5);
        string stepdata = llList2String(sess, 6);
        string menucsv = llList2String(sess, 7);

        // --- Access menu logic ---
        list allowed = llParseString2List(menucsv, [","], []);
        integer sel = llListFindList(allowed, [msg]);
        string action = "";
        if (sel != -1 && sel < llGetListLength(allowed)) {
            action = llList2String(allowed, sel);

            if (ctx == "access_menu") {
                if (action == "Add Owner")        { beginAddOwner(av, dialog_chan); return; }
                if (action == "Release Sub")      { beginReleaseSub(av, dialog_chan); return; }
                if (action == "Add Trustee")      { beginAddTrustee(av, dialog_chan); return; }
                if (action == "Remove Trustee")   { beginRemoveTrustee(av, dialog_chan); return; }
                if (action == "Add Blacklist")    { beginBlacklist(av, dialog_chan); return; }
                if (action == "Rem Blacklist")    { beginUnblacklist(av, dialog_chan); return; }
                if (action == "Public")           { showPublicAccessDialog(av, dialog_chan); return; }
                if (action == "Runaway") {
                    showUACDialog(av, "This will forcibly remove your primary owner and restore your access.", dialog_chan);
                    sSet(av, 0, "", llGetUnixTime() + DIALOG_TIMEOUT, "runaway_confirm", "", "", "", dialog_chan);
                    return;
                }
                return;
            }
        }

        // --- ADD OWNER ---
        if (ctx == "add_owner") {
            list keys = llParseString2List(csv, [","], []);
            integer sel = (integer)msg;
            if (sel > 0 && sel <= llGetListLength(keys)) {
                key picked = llList2Key(keys, sel-1);
                list honors = ownerHonorifics();
                string honorDialog = "Select an honorific for your owner:\n" + numberedMenuText(honors);
                sSet(av, 0, "", llGetUnixTime() + DIALOG_TIMEOUT, "add_owner_honorific", (string)picked, "", "", dialog_chan);
                llDialog(av, honorDialog, buildNumberedButtons(honors), dialog_chan);
                return;
            }
        }
        if (ctx == "add_owner_honorific") {
            list honors = ownerHonorifics();
            integer sel = (integer)msg;
            if (sel > 0 && sel <= llGetListLength(honors)) {
                key picked = (key)param;
                string honorific = llList2String(honors, sel-1);
                sSet(av, 0, "", llGetUnixTime() + DIALOG_TIMEOUT, "add_owner_confirm_wearer", (string)picked, honorific, "", dialog_chan);
                showUACDialog(av, "Are you sure you wish to assign " + honorific + " " + llKey2Name(picked) + " as your new owner?", dialog_chan);
                return;
            }
        }
        if (ctx == "add_owner_confirm_wearer") {
            if (msg == "OK") {
                key picked = (key)param;
                string honorific = stepdata;
                sSet(picked, 0, "", llGetUnixTime() + DIALOG_TIMEOUT, "add_owner_confirm_candidate", (string)av, honorific, "", dialog_chan);
                llDialog(picked, llKey2Name(av) + " wishes to assign you as their collar owner.\nHonorific: " + honorific + "\nDo you accept?", makeUACNavRow(), dialog_chan);
                return;
            }
            if (msg == "Cancel") { sClear(av); return; }
        }
        if (ctx == "add_owner_confirm_candidate") {
            if (msg == "OK") {
                key wearer = (key)param;
                string honorific = stepdata;
                gOwner = av;
                gOwnerHonorific = honorific;
                showInfoDialog(wearer, "You are now property of " + honorific + " " + llKey2Name(av), dialog_chan);
                showInfoDialog(av, "You are now owner of " + llKey2Name(wearer) + ".", dialog_chan);
                sClear(av);      // candidate
                sClear(wearer);  // initiator
                syncStateToGUH();
                return;
            }
            if (msg == "Cancel") { sClear(av); sClear((key)param); return; }
        }

        // --- RELEASE SUB ---
        if (ctx == "release_sub_confirm_owner") {
            if (msg == "OK") {
                key wearer = llGetOwner();
                sSet(wearer, 0, "", llGetUnixTime() + DIALOG_TIMEOUT, "release_sub_confirm_wearer", (string)av, "", "", dialog_chan);
                llDialog(wearer, llKey2Name(av) + " wishes to release you from their collar. Do you accept?", makeUACNavRow(), dialog_chan);
                return;
            }
            if (msg == "Cancel") { sClear(av); return; }
        }
        if (ctx == "release_sub_confirm_wearer") {
            if (msg == "OK") {
                gOwner = NULL_KEY;
                gOwnerHonorific = "";
                showInfoDialog(av, "You are no longer owned.", dialog_chan);
                showInfoDialog(llGetOwner(), "Collar is now unowned.", dialog_chan);
                sClear(av); // candidate
                sClear(llGetOwner()); // initiator
                syncStateToGUH();
                return;
            }
            if (msg == "Cancel") { sClear(av); sClear((key)param); return; }
        }

        // --- ADD TRUSTEE ---
        if (ctx == "add_trustee") {
            list keys = llParseString2List(csv, [","], []);
            integer sel = (integer)msg;
            if (sel > 0 && sel <= llGetListLength(keys)) {
                key picked = llList2Key(keys, sel-1);
                list honors = trusteeHonorifics();
                string honorDialog = "Select an honorific for your trustee:\n" + numberedMenuText(honors);
                sSet(av, 0, "", llGetUnixTime() + DIALOG_TIMEOUT, "add_trustee_honorific", (string)picked, "", "", dialog_chan);
                llDialog(av, honorDialog, buildNumberedButtons(honors), dialog_chan);
                return;
            }
        }
        if (ctx == "add_trustee_honorific") {
            list honors = trusteeHonorifics();
            integer sel = (integer)msg;
            if (sel > 0 && sel <= llGetListLength(honors)) {
                key picked = (key)param;
                string honorific = llList2String(honors, sel-1);
                sSet(picked, 0, "", llGetUnixTime() + DIALOG_TIMEOUT, "add_trustee_confirm_candidate", (string)av, honorific, "", dialog_chan);
                llDialog(picked, llKey2Name(av) + " wishes to add you as trustee to their collar.\nHonorific: " + honorific + "\nDo you accept?", makeUACNavRow(), dialog_chan);
                return;
            }
        }
        if (ctx == "add_trustee_confirm_candidate") {
            if (msg == "OK") {
                key wearer = (key)param;
                string honorific = stepdata;
                gTrustees += av;
                gTrusteeHonorifics += honorific;
                showInfoDialog(wearer, llKey2Name(av) + " is now your trustee.", dialog_chan);
                showInfoDialog(av, "You are now a trustee for " + llKey2Name(wearer) + ".", dialog_chan);
                sClear(av); // candidate
                sClear(wearer); // initiator
                syncStateToGUH();
                return;
            }
            if (msg == "Cancel") { sClear(av); sClear((key)param); return; }
        }

        // --- REMOVE TRUSTEE ---
        if (ctx == "remove_trustee") {
            list keys = llParseString2List(csv, [","], []);
            integer sel = (integer)msg;
            if (sel > 0 && sel <= llGetListLength(keys)) {
                key picked = llList2Key(keys, sel-1);
                sSet(picked, 0, "", llGetUnixTime() + DIALOG_TIMEOUT, "remove_trustee_confirm_candidate", (string)av, "", "", dialog_chan);
                llDialog(picked, llKey2Name(av) + " wishes to remove you as a trustee. Do you accept?", makeUACNavRow(), dialog_chan);
                return;
            }
        }
        if (ctx == "remove_trustee_confirm_candidate") {
            if (msg == "OK") {
                key initiator = (key)param;
                integer idx = gIdx(gTrustees, av);
                if (idx != -1) {
                    gTrustees = llDeleteSubList(gTrustees, idx, idx);
                    gTrusteeHonorifics = llDeleteSubList(gTrusteeHonorifics, idx, idx);
                    showInfoDialog(initiator, "Trustee removed.", dialog_chan);
                    showInfoDialog(av, "You have been removed as a trustee.", dialog_chan);
                }
                sClear(av); // candidate
                sClear(initiator); // initiator
                syncStateToGUH();
                return;
            }
            if (msg == "Cancel") { sClear(av); sClear((key)param); return; }
        }

        // --- BLACKLIST ---
        if (ctx == "blacklist") {
            list keys = llParseString2List(csv, [","], []);
            integer sel = (integer)msg;
            if (sel > 0 && sel <= llGetListLength(keys)) {
                key picked = llList2Key(keys, sel-1);
                sSet(av, 0, "", llGetUnixTime() + DIALOG_TIMEOUT, "blacklist_confirm", (string)picked, "", "", dialog_chan);
                showUACDialog(av, "You are about to blacklist " + llKey2Name(picked) + ". Continue?", dialog_chan);
                return;
            }
        }
        if (ctx == "blacklist_confirm") {
            if (msg == "OK") {
                key picked = (key)param;
                gBlacklist += picked;
                showInfoDialog(av, "You have blacklisted " + llKey2Name(picked) + ".", dialog_chan);
                sClear(av);
                syncStateToGUH();
                return;
            }
            if (msg == "Cancel") { sClear(av); return; }
        }

        // --- UNBLACKLIST ---
        if (ctx == "unblacklist") {
            list keys = llParseString2List(csv, [","], []);
            integer sel = (integer)msg;
            if (sel > 0 && sel <= llGetListLength(keys)) {
                key picked = llList2Key(keys, sel-1);
                sSet(av, 0, "", llGetUnixTime() + DIALOG_TIMEOUT, "unblacklist_confirm", (string)picked, "", "", dialog_chan);
                showUACDialog(av, "Remove " + llKey2Name(picked) + " from blacklist?", dialog_chan);
                return;
            }
        }
        if (ctx == "unblacklist_confirm") {
            if (msg == "OK") {
                key picked = (key)param;
                integer idx = gIdx(gBlacklist, picked);
                if (idx != -1) {
                    gBlacklist = llDeleteSubList(gBlacklist, idx, idx);
                    showInfoDialog(av, llKey2Name(picked) + " has been removed from the blacklist.", dialog_chan);
                }
                sClear(av);
                syncStateToGUH();
                return;
            }
            if (msg == "Cancel") { sClear(av); return; }
        }

        // --- PUBLIC ACCESS TOGGLE ---
        if (ctx == "public_toggle_confirm") {
            if (msg == "Enable") {
                gPublicAccess = TRUE;
                showInfoDialog(av, "Public access is now ENABLED.", dialog_chan);
                sClear(av);
                syncStateToGUH();                
                return;
            }
            if (msg == "Disable") {
                gPublicAccess = FALSE;
                showInfoDialog(av, "Public access is now DISABLED.", dialog_chan);
                sClear(av);
                syncStateToGUH();
                return;
            }
            if (msg == "Cancel") { sClear(av); return; }
        }

        // --- RUNAWAY (owned wearer only) ---
        if (ctx == "runaway_confirm") {
            if (msg == "OK") {
                gOwner = NULL_KEY;
                gOwnerHonorific = "";
                showInfoDialog(av, "You have run away and are now unowned.", dialog_chan);
                sClear(av);
                syncStateToGUH();
                return;
            }
            if (msg == "Cancel") { sClear(av); return; }
        }
    }

    timer() { timeoutCheck(); }
}
