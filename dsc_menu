// =============================================================
//  Dynamic RP Collar – dsc_menu  (2025-06-25, ternary-free)
// =============================================================

// ---------- channel helpers ----------
integer chanBase()
{
    integer tail = (integer)("0x" + llGetSubString((string)llGetKey(), -6, -1));
    return -4000 - (tail & 0x0FFF);          // unique negative space
}

// ---------- constants ----------
integer CHANNEL_BASE;
integer CHAN_CORE;
integer CHAN_AUTH;
integer CHAN_SETTINGS;
integer CHAN_MENU;

integer DIALOG_CHAN;                         // private chat channel
integer PAGE_SIZE = 9;                       // plugin buttons per page

// ---------- per-avatar session store ----------
// gSessions = [avatar, page, csv, avatar, page, csv, …]
list gSessions;

integer sessionIndex(key av)                 // –1 if not present
{
    return llListFindList(gSessions, [av]);
}
integer sessionPage(key av)
{
    integer idx = sessionIndex(av);
    if (~idx) return llList2Integer(gSessions, idx + 1);
    return 0;
}
string sessionCSV(key av)
{
    integer idx = sessionIndex(av);
    if (~idx) return llList2String(gSessions, idx + 2);
    return "";
}
integer sessionSet(key av, integer page, string csv)
{
    integer idx = sessionIndex(av);
    if (~idx) gSessions = llDeleteSubList(gSessions, idx, idx + 2);
    gSessions += [av, page, csv];
    return 0;
}

// ---------- dialog helpers ----------
list buildButtons(string csv, integer page)
{
    /* ---------- build the nav row first (bottom row) ---------- */
    string backBtn   = "<< BACK";
    string cancelBtn = "CANCEL";
    string nextBtn   = "NEXT >>";

    if (page == 0)       backBtn = "<======>";
    if (csv == "" ||                      // no plugins on last page
        page * PAGE_SIZE + PAGE_SIZE >=
        llGetListLength(llParseString2List(csv,[","],[])))
        nextBtn = "<======>";

    list buttons = [backBtn, cancelBtn, nextBtn];

    /* ---------- add this page’s plugin names ---------- */
    list names;
    if (csv != "")
        names = llParseString2List(csv,[","],[]);
    else
        names = [];

    integer total = llGetListLength(names);
    integer first = page * PAGE_SIZE;
    integer last  = first + PAGE_SIZE - 1;
    if (last >= total) last = total - 1;

    integer i;
    for (i = first; i <= last; ++i)
    {
        string label = llList2String(names, i);
        if (llStringLength(label) > 12)
            label = llGetSubString(label, 0, 11);
        buttons += label;
    }

    /* ---------- pad with single-space labels so plugin rows stay complete ---------- */
    while (llGetListLength(buttons) % 3 != 0)
        buttons += " ";

    return buttons;
}

integer showMenu(key av, string csv, integer page)
{
    list pluginNames;
    integer total;
    if (csv != "")
    {
        pluginNames = llParseString2List(csv, [","], []);
        total = llGetListLength(pluginNames);
    }
    else
    {
        pluginNames = [];
        total = 0;
    }

    integer pagesCount = (total + PAGE_SIZE - 1) / PAGE_SIZE;
    list buttons = buildButtons(csv, page);

    string title = "Collar Menu (" + (string)(page + 1) + "/" + (string)pagesCount + ")";
    llDialog(av, title, buttons, DIALOG_CHAN);
    return 0;
}

// ---------- memory watchdog ----------
integer checkMemory()
{
    if (llGetFreeMemory() < 2048)
        llOwnerSay("Warning: collar scripts have < 2 kB free memory.");
    return 0;
}

// -------------------------------------------------------------
default
{
    state_entry()
    {
        llSetRemoteScriptAccessPin(0);       // security

        CHANNEL_BASE  = chanBase();
        CHAN_CORE     = CHANNEL_BASE - 0;
        CHAN_AUTH     = CHANNEL_BASE - 1;
        CHAN_SETTINGS = CHANNEL_BASE - 2;
        CHAN_MENU     = CHANNEL_BASE - 3;

        DIALOG_CHAN   = CHANNEL_BASE - 100;  // separate private channel
        llListen(DIALOG_CHAN, "", NULL_KEY, "");

        checkMemory();
    }

    // ---------- LINK MESSAGES ----------
    link_message(integer sender, integer channel, string msg, key id)
    {
        // (1) Touch event forwarded from Core via Auth
        if (channel == CHAN_AUTH && llSubStringIndex(msg, "CORE|TOUCH|") == 0)
        {
            key av = (key)llGetSubString(msg, 11, -1);
            llMessageLinked(LINK_THIS, CHAN_AUTH, "QUERY|" + (string)av, NULL_KEY);
            sessionSet(av, 0, "");           // placeholder until CSV arrives
            return;
        }

        // (2) ACL reply from Auth
        if (channel == CHAN_AUTH && llSubStringIndex(msg, "ACL|") == 0)
        {
            list p  = llParseString2List(msg, ["|"], []);
            key av  = (key)llList2String(p, 1);
            integer level = (integer)llList2String(p, 2);

            llMessageLinked(LINK_THIS, CHAN_CORE,
                            "REQ_PLUGINS|" + (string)level, NULL_KEY);
            return;
        }

        // (3) Plugin list from Core
        if (channel == CHAN_CORE && llSubStringIndex(msg, "PLUGINS|") == 0)
        {
            list   p   = llParseString2List(msg, ["|"], []);
            string csv = llList2String(p, 1);

            // fill CSV for every waiting session (page == 0 and csv blank)
            integer n = llGetListLength(gSessions);
            integer i;
            for (i = 0; i < n; i += 3)
            {
                string existingCSV = llList2String(gSessions, i + 2);
                if (existingCSV == "")
                {
                    key av = llList2Key(gSessions, i);
                    sessionSet(av, 0, csv);
                    showMenu(av, csv, 0);
                }
            }
            return;
        }

        // (4) Plugins can also listen to CHAN_MENU for selections
    }

    // ---------- DIALOG RESPONSES ----------
    listen(integer chan, string name, key av, string msg)
    {
        if (chan != DIALOG_CHAN) return;

        integer idx = sessionIndex(av);
        if (idx == -1) return;

        integer page = llList2Integer(gSessions, idx + 1);
        string  csv  = llList2String( gSessions, idx + 2);

        list pluginNames;
        integer total;
        if (csv != "")
        {
            pluginNames = llParseString2List(csv, [","], []);
            total = llGetListLength(pluginNames);
        }
        else
        {
            pluginNames = [];
            total = 0;
        }

        integer pagesCount = (total + PAGE_SIZE - 1) / PAGE_SIZE;

        // --- navigation buttons ---
        if (msg == "<< BACK")
        {
            if (page > 0)
            {
                page--;
                sessionSet(av, page, csv);
                showMenu(av, csv, page);
            }
            return;
        }
        if (msg == "NEXT >>")
        {
            if (page < pagesCount - 1)
            {
                page++;
                sessionSet(av, page, csv);
                showMenu(av, csv, page);
            }
            return;
        }
        if (msg == "CANCEL" || msg == "<======>")
        {
            gSessions = llDeleteSubList(gSessions, idx, idx + 2);
            return;
        }

        // --- plugin selection ---
        integer first = page * PAGE_SIZE;
        integer lastIndex = first + PAGE_SIZE - 1;
        if (lastIndex >= total) lastIndex = total - 1;

        integer j;
        for (j = first; j <= lastIndex; ++j)
        {
            string fullName = llList2String(pluginNames, j);
            string shortName = fullName;
            if (llStringLength(fullName) > 12)
                shortName = llGetSubString(fullName, 0, 11);

            if (msg == shortName)
            {
                llMessageLinked(LINK_SET, CHAN_MENU,
                                "MENU|SELECT|" + fullName + "|" + (string)av, NULL_KEY);
                gSessions = llDeleteSubList(gSessions, idx, idx + 2);
                return;
            }
        }
    }
}
