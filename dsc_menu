// =============================================================
//  dsc_menu – Dynamic Collar Main Menu  (bottom-row nav, no ternary)
//  28 Jun 2025
// =============================================================

// ---------- TEMP debug helper ----------
debug(string msg){ llOwnerSay("["+llGetScriptName()+"] "+msg); }
// ---------------------------------------

// ---------- constants ----------
integer PAGE_SIZE    = 9;
float   DIALOG_DELAY = 0.10;

// ---------- channel map ----------
integer CHANNEL_BASE;
integer CHAN_CORE;
integer CHAN_AUTH;
integer CHAN_MENU;
integer DIALOG_CHAN;

// ---------- session store  [avatar, page, csv] ----------
list gSessions;

// ---------- queued dialog list  [avatar, csvPiped, title] ----------
list gDlgQ; integer timerRunning = FALSE;

// =============================================================
//                       helper functions
// =============================================================
integer calcBase()
{
    integer tail = (integer)("0x"+llGetSubString((string)llGetKey(),-6,-1));
    return -4000 - (tail & 0x0FFF);
}

/* ---- session helpers ---- */
integer sIdx(key av){ return llListFindList(gSessions,[av]); }
integer sPage(key av){ integer i=sIdx(av); if(~i) return llList2Integer(gSessions,i+1); return 0;}
string  sCSV(key av){ integer i=sIdx(av); if(~i) return llList2String(gSessions,i+2);  return "";}
integer sSet(key av,integer pg,string csv)
{
    integer i=sIdx(av);
    if(~i) gSessions = llDeleteSubList(gSessions,i,i+2);
    gSessions += [av,pg,csv]; return 0;
}
integer sClear(key av)
{
    integer i=sIdx(av);
    if(~i) gSessions = llDeleteSubList(gSessions,i,i+2);
    return 0;
}

/* ---- build buttons with nav row first (bottom) ---- */
list buildButtons(string csv,integer page)
{
    list plugs;
    if(csv != "")
        plugs = llParseString2List(csv,[","],[]);
    else
        plugs = [];

    integer total = llGetListLength(plugs);
    integer first = page * PAGE_SIZE;
    integer last  = first + PAGE_SIZE - 1;
    if(last >= total) last = total - 1;

    string back = "<< BACK";
    string next = "NEXT >>";
    if(page == 0)       back = "<======>";
    if(last == total-1) next = "<======>";

    list out = [back,"CANCEL",next];        // nav row (bottom)

    integer i;
    for(i = first; i <= last; ++i)
    {
        string lab = llList2String(plugs,i);
        if(llStringLength(lab) > 12) lab = llGetSubString(lab,0,11);
        out += lab;
    }
    return out;
}

/* ---- dialog queue & debounce ---- */
integer queueDialog(key av,list btn,string ttl)
{
    gDlgQ += [av,llDumpList2String(btn,"|"),ttl];
    if(!timerRunning)
    { llSetTimerEvent(DIALOG_DELAY); timerRunning = TRUE; }
    return 0;
}

// =============================================================
//                          MAIN
// =============================================================
default
{
    state_entry()
    {
        CHANNEL_BASE = calcBase();
        CHAN_CORE    = CHANNEL_BASE - 0;
        CHAN_AUTH    = CHANNEL_BASE - 1;
        CHAN_MENU    = CHANNEL_BASE - 3;
        DIALOG_CHAN  = CHANNEL_BASE - 100;

        llListen(DIALOG_CHAN,"",NULL_KEY,"");
        debug("boot on CH-BASE "+(string)CHANNEL_BASE);
    }

    /* ---------------- LINK_MESSAGE ---------------- */
    link_message(integer s,integer ch,string msg,key id)
    {
        /* A. touch forwarded */
        if(ch == CHAN_AUTH && llSubStringIndex(msg,"CORE|TOUCH|") == 0)
        {
            key av=(key)llGetSubString(msg,11,-1);
            sSet(av,0,"");
            llMessageLinked(LINK_THIS,CHAN_AUTH,"QUERY|"+(string)av,NULL_KEY);
            debug("touch from "+(string)av+" -> ACL query");
            return;
        }

        /* B. ACL reply */
        if(ch == CHAN_AUTH && llSubStringIndex(msg,"ACL|") == 0)
        {
            list p=llParseString2List(msg,["|"],[]);
            key av=(key)llList2String(p,1);
            integer lvl=(integer)llList2String(p,2);

            llMessageLinked(LINK_THIS,CHAN_CORE,"REQ_PLUGINS|"+(string)lvl,NULL_KEY);
            debug("ACL "+(string)lvl+" for "+(string)av+" -> request plugins");
            return;
        }

        /* C. CSV list from Core */
        if(ch == CHAN_CORE && llSubStringIndex(msg,"PLUGINS|") == 0)
        {
            list p   = llParseString2List(msg,["|"],[]);
            string csv = llList2String(p,1);
            debug("received PLUGINS csv len="+(string)llStringLength(csv));

            integer i; for(i=0;i<llGetListLength(gSessions);i+=3)
            {
                key av = llList2Key(gSessions,i);
                integer pg = llList2Integer(gSessions,i+1);
                string curCSV = llList2String(gSessions,i+2);
                if(pg==0 && curCSV=="")
                {
                    sSet(av,0,csv);

                    if(csv == "")
                    {
                        queueDialog(av,["OK"],"No plug-ins for your access");
                        debug("empty notice queued for "+(string)av);
                    }
                    else
                    {
                        list b = buildButtons(csv,0);
                        integer pages=(llGetListLength(llParseString2List(csv,[","],[]))+PAGE_SIZE-1)/PAGE_SIZE;
                        queueDialog(av,b,"Collar Menu (1/"+(string)pages+")");
                        debug("menu queued for "+(string)av);
                    }
                }
            }
            return;
        }

        /* D. nav / selection */
        if(ch == CHAN_MENU)
        {
            list p=llParseString2List(msg,["|"],[]);
            if(llGetListLength(p)<4) return;
            if(llList2String(p,0)!="MENU") return;
            if(llList2String(p,1)!="SELECT") return;

            key av=(key)llList2String(p,3);
            string sel = llList2String(p,2);
            string csv = sCSV(av);
            if(csv=="") return;

            integer pg = sPage(av);
            list plugs = llParseString2List(csv,[","],[]);
            integer total = llGetListLength(plugs);
            integer pages = (total+PAGE_SIZE-1)/PAGE_SIZE;

            if(sel == "<< BACK" && pg>0)
            {
                pg--; sSet(av,pg,csv);
                queueDialog(av,buildButtons(csv,pg),"Collar Menu ("+(string)(pg+1)+"/"+(string)pages+")"); return;
            }
            if(sel == "NEXT >>" && pg<pages-1)
            {
                pg++; sSet(av,pg,csv);
                queueDialog(av,buildButtons(csv,pg),"Collar Menu ("+(string)(pg+1)+"/"+(string)pages+")"); return;
            }
            if(sel == "CANCEL" || sel == "<======>")
            { sClear(av); return; }

            /* map short → full */
            integer base=pg*PAGE_SIZE; integer idx;
            for(idx=0; idx<PAGE_SIZE && base+idx<total; ++idx)
            {
                string full=llList2String(plugs,base+idx);
                string short=full; if(llStringLength(short)>12) short=llGetSubString(short,0,11);
                if(sel==short)
                {
                    llMessageLinked(LINK_THIS,CHAN_MENU,"MENU|SELECT|"+full+"|"+(string)av,NULL_KEY);
                    sClear(av); return;
                }
            }
        }
    }

    /* ---------------- TIMER (debounce) ---------------- */
    timer()
    {
        if(llGetListLength(gDlgQ)==0)
        { llSetTimerEvent(0.0); timerRunning=FALSE; return; }

        key av=(key)llList2String(gDlgQ,0);
        list btn = llParseString2List(llList2String(gDlgQ,1),["|"],[]);
        string ttl=llList2String(gDlgQ,2);
        gDlgQ = llDeleteSubList(gDlgQ,0,2);

        debug("llDialog → "+(string)av);
        llDialog(av,ttl,btn,DIALOG_CHAN);

        if(llGetListLength(gDlgQ)==0)
        { llSetTimerEvent(0.0); timerRunning=FALSE; }
    }
}
