// === dsc_menu.lsl ===
// Minimal menu plugin for DS Collar
// Registers to core as Backend and shows simple paginated list of UI plugins
// Fixed buttons: Back, Cancel, Next

integer LM_PLUGIN_REG_REQUEST  = -7000;
integer LM_PLUGIN_REG_RESPONSE = -7001;

integer LM_MENU_REQUEST        = -4000;
integer LM_MENU_RESPONSE       = -4001;

integer DIALOG_CHANNEL         = -8000;  // reserved dialog response channel

integer STATE_IDLE = 0;
integer STATE_MENU = 1;

integer g_state = STATE_IDLE;

key     g_core = NULL_KEY;
key     g_currentUser = NULL_KEY;

list    g_ui_labels = [];   // plugin friendly names (labels)
list    g_ui_plugins = [];  // plugin script names
list    g_ui_acls = [];     // plugin ACLs (not used here)
list    g_ui_types = [];    // plugin types

integer g_menu_page = 0;
integer ITEMS_PER_PAGE = 6;

string BUTTON_BACK = "Back";
string BUTTON_CANCEL = "Cancel";
string BUTTON_NEXT = "Next";

integer g_listen_handle = -1;

RegisterSelf()
{
    // Register as Backend so menu itself is hidden from UI menu
    llMessageLinked(LINK_SET, LM_PLUGIN_REG_RESPONSE, "Menu|dsc_menu|1|Backend", NULL_KEY);
}

ShowMenu(key user)
{
    if (user == NULL_KEY) return;
    g_currentUser = user;

    integer start = g_menu_page * ITEMS_PER_PAGE;
    integer end = start + ITEMS_PER_PAGE - 1;
    integer total_items = llGetListLength(g_ui_labels);

    list menu_items = [];
    integer i;
    for (i = start; i <= end && i < total_items; i++)
    {
        menu_items += [llList2String(g_ui_labels, i)];
    }

    if (g_menu_page > 0) menu_items += [BUTTON_BACK];
    menu_items += [BUTTON_CANCEL];
    if ((g_menu_page + 1) * ITEMS_PER_PAGE < total_items) menu_items += [BUTTON_NEXT];

    if (g_listen_handle != -1)
    {
        llListenRemove(g_listen_handle);
    }
    g_listen_handle = llListen(DIALOG_CHANNEL, "", NULL_KEY, "");

    llDialog(user, "Select a plugin (Page " + (string)(g_menu_page + 1) + " of " + (string)((total_items + ITEMS_PER_PAGE - 1)/ITEMS_PER_PAGE) + ")", menu_items, DIALOG_CHANNEL);

    g_state = STATE_MENU;
}

default
{
    state_entry()
    {
        g_core = llGetOwner(); // or LINK_THIS if needed
        RegisterSelf();
    }

    link_message(integer sender, integer num, string msg, key id)
    {
        if (num == LM_PLUGIN_REG_REQUEST)
        {
            RegisterSelf();
        }
        else if (num == LM_PLUGIN_REG_RESPONSE)
        {
            if (msg != "")
            {
                list parts = llParseString2List(msg, ["|"], []);
                integer count = llGetListLength(parts);

                // Clear lists before re-populating
                g_ui_labels = [];
                g_ui_plugins = [];
                g_ui_acls = [];
                g_ui_types = [];

                integer i;
                for (i = 0; i + 3 < count; i += 4)
                {
                    string label = llList2String(parts, i);
                    string plugin = llList2String(parts, i + 1);
                    integer acl = (integer)llList2String(parts, i + 2);
                    string type = llList2String(parts, i + 3);

                    if (type == "UI")
                    {
                        g_ui_labels += [label];
                        g_ui_plugins += [plugin];
                        g_ui_acls += [acl];
                        g_ui_types += [type];
                    }
                }
                g_menu_page = 0;
            }
        }
        else if (num == LM_MENU_REQUEST)
        {
            ShowMenu(id);
        }
    }

    listen(integer channel, string name, key id, string message)
    {
        if (channel != DIALOG_CHANNEL) return;
        if (g_state != STATE_MENU) return;

        if (message == BUTTON_CANCEL)
        {
            llSay(0, "Menu canceled.");
            g_state = STATE_IDLE;
            if (g_listen_handle != -1)
            {
                llListenRemove(g_listen_handle);
                g_listen_handle = -1;
            }
            return;
        }
        else if (message == BUTTON_BACK)
        {
            if (g_menu_page > 0)
            {
                g_menu_page--;
                ShowMenu(g_currentUser);
            }
            return;
        }
        else if (message == BUTTON_NEXT)
        {
            integer total_pages = (llGetListLength(g_ui_labels) + ITEMS_PER_PAGE - 1) / ITEMS_PER_PAGE;
            if (g_menu_page < total_pages - 1)
            {
                g_menu_page++;
                ShowMenu(g_currentUser);
            }
            return;
        }
        else
        {
            // Send selected plugin label as menu response for core or plugin handling
            llMessageLinked(LINK_SET, LM_MENU_RESPONSE, message, g_currentUser);

            // Close menu and stop listening
            g_state = STATE_IDLE;
            if (g_listen_handle != -1)
            {
                llListenRemove(g_listen_handle);
                g_listen_handle = -1;
            }
        }
    }

    touch_start(integer total_number)
    {
        key toucher = llDetectedKey(0);
        ShowMenu(toucher);
    }
}
